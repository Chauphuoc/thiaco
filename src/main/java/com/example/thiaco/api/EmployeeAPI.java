package com.example.thiaco.api;import com.example.thiaco.dto.EmployeeDTO;import com.example.thiaco.dto.EmployeeReqDTO;import com.example.thiaco.dto.EmployeeReqUpDTO;import com.example.thiaco.enums.EStatus;import com.example.thiaco.enums.Earea;import com.example.thiaco.exception.DataInputException;import com.example.thiaco.exception.ResourceNotFoundException;import com.example.thiaco.model.LocationRegion.LocationRegion;import com.example.thiaco.model.department.Department;import com.example.thiaco.model.employee.Employee;import com.example.thiaco.model.salary.Salary;import com.example.thiaco.service.department.IDepartmentService;import com.example.thiaco.service.employee.EmployeeService;import com.example.thiaco.service.employee.IEmployeeService;import com.example.thiaco.service.locationRegion.ILocationRegionService;import com.example.thiaco.service.salary.ISalaryService;import com.example.thiaco.utils.AppUtils;import jakarta.servlet.http.HttpServletResponse;import jakarta.validation.Valid;import jakarta.validation.constraints.NotEmpty;import lombok.AllArgsConstructor;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.validation.BeanPropertyBindingResult;import org.springframework.validation.BindingResult;import org.springframework.web.bind.annotation.*;import org.springframework.web.multipart.MultipartFile;import java.io.IOException;import java.math.BigDecimal;import java.time.LocalDate;import java.util.*;import java.util.stream.Collectors;@RestController@AllArgsConstructor@RequestMapping("/api/employees")public class EmployeeAPI {    @Autowired    private IEmployeeService employeeService;    @Autowired    private IDepartmentService departmentService;    @Autowired    private ISalaryService salaryService;    @Autowired    private ILocationRegionService locationRegionService;    @Autowired    private AppUtils appUtils;//    @GetMapping()//    public ResponseEntity<?> GetAllEmployeesDeleteFalse(Pageable pageable) {////////        Page<EmployeeResDTO> employeePage = employeeService.getEmployeesByDeletedIsFalse(pageable);////        return new ResponseEntity<>(employeePage, HttpStatus.OK);//    }    @GetMapping()    public ResponseEntity<?> getAllEmployeesDeleteFalse() {        List<Employee> employees = employeeService.findEmployeesByDeletedIsFalse();        List<EmployeeDTO> employeeDTOList = employees.stream().map(employee -> employee.toEmployeeDTO(employee)).collect(Collectors.toList());        return new ResponseEntity<>(employeeDTOList,HttpStatus.OK);    }    @GetMapping("/{id}")    public ResponseEntity<?> findEmployeeById(@PathVariable Long id) {        if (id == null) {            throw new DataInputException("Nhân viên không tồn tại.");        }        Optional<Employee> employeeOptional = employeeService.findById(id);        if (!employeeOptional.isPresent()) {            return new ResponseEntity<>(null, HttpStatus.OK);        }        Employee employee = employeeOptional.get();        EmployeeDTO employeeDTO = employee.toEmployeeDTO(employee);        return new ResponseEntity<>(employeeDTO, HttpStatus.OK);    }    @GetMapping("/manv")    public ResponseEntity<?> findEmployeeByMNV(@RequestParam("manv") Long manv) {        Employee employee = employeeService.findEmployeeByEmployeeId(manv);        EmployeeDTO employeeDTO = employee.toEmployeeDTO(employee);        return new ResponseEntity<>(employeeDTO, HttpStatus.OK);    }    @PostMapping()    public ResponseEntity<?> createEmployee(@RequestBody @Valid EmployeeReqDTO employeeReqDTO, BindingResult bindingResult) {        if (bindingResult.hasErrors()) {            return appUtils.mapErrorToResponse(bindingResult);        }        Employee employee = create(employeeReqDTO);        EmployeeDTO employeeDTO = employee.toEmployeeDTO(employee);        return new ResponseEntity<>(employeeDTO, HttpStatus.OK);    }    public Employee create(EmployeeReqDTO employeeReqDTO) {        Employee employee = new Employee();        Department department = new Department();        Long departmentId = employeeReqDTO.getDepartmentDTO().getId();        Optional<Department> departmentOptional = departmentService.findById(departmentId);        if (!departmentOptional.isPresent()) {            throw new DataInputException("Phòng ban không tìm thấy.");        }        department = departmentOptional.get();        Long employee_id = employeeReqDTO.getEmployee_id();        String fullName = employeeReqDTO.getFullName();        LocalDate dateOfBirth = EmployeeService.convertStringToLocalDate(employeeReqDTO.getDateOfBirth());        String gender = employeeReqDTO.getGender();        String placeOfBirth = employeeReqDTO.getPlaceOfBirth();        String qualification = employeeReqDTO.getQualification();        String educationLevel = employeeReqDTO.getEducationLevel();        String culturalLevel = employeeReqDTO.getCulturalLevel();        String homeTown = employeeReqDTO.getHomeTown();        String maritalStatus = employeeReqDTO.getMaritalStatus();        String position = employeeReqDTO.getPosition();        LocalDate joiningDay = EmployeeService.convertStringToLocalDate(employeeReqDTO.getJoiningday());        LocalDate employeeeContractDay = EmployeeService.convertStringToLocalDate(employeeReqDTO.getEmploymentContractDate());        String socialInsuranceMonth = employeeReqDTO.getSocialInsuranceMonth();        String relationShip = employeeReqDTO.getRelationShip();        String socialInsuranceNumber = employeeReqDTO.getSocialInsuranceNumber();        String phoneNumber = employeeReqDTO.getPhoneNumber();        String idCardNumber = employeeReqDTO.getIdCardNumber();        LocalDate dateOfIssueCmnd = EmployeeService.convertStringToLocalDate(employeeReqDTO.getDateOfIssueCmnd());        String placeOfIssueCmnd = employeeReqDTO.getPlaceOfIssueCmnd();        String citizenCardNumber = employeeReqDTO.getCitizenCardNumber();        LocalDate dateOfIssue = EmployeeService.convertStringToLocalDate(employeeReqDTO.getDateOfIssue());        String placeOfIssue = employeeReqDTO.getPlaceOfIssue();        EStatus status = EStatus.getEStatus(employeeReqDTO.getEmployeeStatus()) ;        String description = employeeReqDTO.getDescription();        String stkBank = employeeReqDTO.getStkBank();        String nameBank = employeeReqDTO.getNameBank();        String masothue = employeeReqDTO.getMasothue();        String area = employeeReqDTO.getArea();        int checkEmployeeId = employeeService.existsByEmployee_id(employee_id);        if (checkEmployeeId==0) {            employee.setEmployee_id(employee_id);        } else {            throw new DataInputException("Mã nhân viên đã bị trùng! Xin vui lòng nhập lại");        }        employee.setFullName(fullName);        LocalDate current = LocalDate.now();        if (dateOfBirth.isAfter(current)) {            throw new DataInputException("Ngày sinh nhập không hợp lệ. Xin vui lòng nhập lại");        } else {            employee.setDateOfBirth(dateOfBirth);        }        employee.setGender(gender);        employee.setPlaceOfBirth(placeOfBirth);        employee.setQualification(qualification);        employee.setEducationLevel(educationLevel);        employee.setCulturalLevel(culturalLevel);        employee.setHomeTown(homeTown);        employee.setMaritalStatus(maritalStatus);        employee.setPosition(position);        employee.setJoiningday(joiningDay);        if (employeeeContractDay.isAfter(current)) {            throw new DataInputException("Ngày ký hợp đồng không hợp lệ. Xin vui lòng nhập lại");        } else {            employee.setEmploymentContractDate(employeeeContractDay);        }        employee.setSocialInsuranceMonth(socialInsuranceMonth);        employee.setRelationShip(relationShip);        employee.setSocialInsuranceNumber(socialInsuranceNumber);        employee.setPhoneNumber(phoneNumber);        int checkCmnd = employeeService.existsByCmnd(idCardNumber);        if (checkCmnd == 0) {            employee.setIdCardNumber(idCardNumber);        } else {            throw new DataInputException("Cmnd đã bị trùng! Xin vui lòng nhập lại");        }        employee.setDateOfIssueCmnd(dateOfIssueCmnd);        employee.setPlaceOfIssueCmnd(placeOfIssueCmnd);        int checkCccd = employeeService.existsByCccd(citizenCardNumber);        if (checkCccd == 0) {            employee.setCitizenCardNumber(citizenCardNumber);        } else {            throw new DataInputException("Cccd đã bị trùng! Xin vui lòng nhập lại");        }        employee.setDateOfIssue(dateOfIssue);        employee.setPlaceOfIssue(placeOfIssue);        employee.setEmployeeStatus(status);        employee.setDescription(description);        employee.setStkBank(stkBank);        employee.setNameBank(nameBank);        employee.setMasothue(masothue);        employee.setEarea(Earea.getArea(area));        employee.setStartDay(LocalDate.now());        employee.setDepartment(department);        // calculate salaryAmount        Salary salary = employeeReqDTO.getSalaryDTO().toSalary();        BigDecimal salaryAmount = employeeReqDTO.getSalaryDTO().getSalaryCoEfficient().multiply(employeeReqDTO.getSalaryDTO().getBasicSalary());        salary.setSalaryAmount(salaryAmount);        LocationRegion locationRegion = employeeReqDTO.getLocationRegionDTO().toLocationRegion();        employeeService.save(employee);        Long manv = employeeReqDTO.getEmployee_id();        Employee newEmployee = employeeService.findEmployeeByEmployeeId(manv);        salary.setEmployee(newEmployee);        salaryService.save(salary);        Salary newSalary = salaryService.findSalaryByEmployee(newEmployee);        locationRegion.setEmployee(newEmployee);        locationRegionService.save(locationRegion);        LocationRegion newLocationRegion = locationRegionService.findLocationRegionByEmployee(newEmployee);        newEmployee.setSalary(newSalary);        newEmployee.setLocationRegion(newLocationRegion);        return newEmployee;    }    @PatchMapping("/{id}")    public ResponseEntity<?> updateEmployee(@PathVariable Long id, @RequestBody @Valid EmployeeReqUpDTO employeeReqUpDTO, BindingResult bindingResult) {        if (bindingResult.hasErrors()) {            return new AppUtils().mapErrorToResponse(bindingResult);        }        employeeReqUpDTO.setId(id);        Employee employee = employeeService.update(id,employeeReqUpDTO);        EmployeeDTO employeeDTO = employee.toEmployeeDTO(employee);        return new ResponseEntity<>(employeeDTO, HttpStatus.OK);    }    @DeleteMapping("/{id}")    public ResponseEntity<?> deleteEmployee(@PathVariable Long id) {        Optional<Employee> employeeOptional = employeeService.findById(id);        if (!employeeOptional.isPresent()) {            throw new ResourceNotFoundException("Không tìm thấy nhân viên");        }        Employee employee = employeeOptional.get();        List<Employee> employeeList = employeeService.deleteEmployee(employee);        List<EmployeeDTO> employeeDTOList = employeeList.stream().map(employee1 -> employee1.toEmployeeDTO(employee1)).collect(Collectors.toList());        return new ResponseEntity<>(employeeDTOList, HttpStatus.OK);    }    @PostMapping("/upload")    public void upload(@RequestParam("file") MultipartFile file) {        employeeService.importToDb(file);    }    @GetMapping("/export")    public void export(HttpServletResponse response) throws IOException {        employeeService.exportToExcel(response);    }    @DeleteMapping("/delete")    public ResponseEntity<?> deleteEmployees (@RequestParam("ids") String listEmployeeIDs ) {        String[] arrStrIds = listEmployeeIDs.split(",");        Set<String> uniqueIds = new HashSet<>();        for (String id : arrStrIds) {            uniqueIds.add(id);        }        List<Long> arrIds = new ArrayList<>();        for (String id : uniqueIds) {            Long employeeId = Long.parseLong(id);            arrIds.add(employeeId);        }        for (Long id: arrIds) {            Optional<Employee> employeeOptional = employeeService.findById(id);            if (!employeeOptional.isPresent()) {                throw new DataInputException("Không tìm thấy nhân viên");            }            Employee employee = employeeOptional.get();            employee.setDeleted(true);            employeeService.save(employee);        }        List<Employee> employeeList = employeeService.findEmployeesByDeletedIsFalse();        List<EmployeeDTO> employeeDTOList = employeeList.stream().map(employee -> employee.toEmployeeDTO(employee)).collect(Collectors.toList());        return new ResponseEntity<>(employeeDTOList, HttpStatus.OK);    }    @GetMapping("/deletedEmployee")    public ResponseEntity<?> getDeletedEmployee() {        List<Employee> employees = employeeService.findEmployeesByDeletedIsTrue();        List<EmployeeDTO> employeeDTOList = employees.stream().map(employee -> employee.toEmployeeDTO(employee)).collect(Collectors.toList());        return new ResponseEntity<>(employeeDTOList, HttpStatus.OK);    }    @DeleteMapping ("/switchEmployee")    public ResponseEntity<?> restoreEmployee(@RequestParam("ids") String employeeIds) {        String[] arrStrIds = employeeIds.split(",");        Set<String> uniqueIds = new HashSet<>();        for (String id : arrStrIds) {            uniqueIds.add(id);        }        List<Long> arrIds = new ArrayList<>();        for (String id : uniqueIds) {            Long employeeId = Long.parseLong(id);            arrIds.add(employeeId);        }        for (Long id: arrIds) {            Optional<Employee> employeeOptional = employeeService.findById(id);            if (!employeeOptional.isPresent()) {                throw new DataInputException("Không tìm thấy nhân viên");            }            Employee employee = employeeOptional.get();            employee.setDeleted(false);            employeeService.save(employee);        }        List<Employee> employeeList = employeeService.findEmployeesByDeletedIsTrue();        List<EmployeeDTO> employeeDTOList = employeeList.stream().map(employee -> employee.toEmployeeDTO(employee)).collect(Collectors.toList());        return new ResponseEntity<>(employeeDTOList, HttpStatus.OK);    }}